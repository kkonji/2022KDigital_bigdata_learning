#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#

library(ggplot2)
library(shiny)
library(treemap)
library(d3treeR)
library(tidyverse)

# 데이터 로딩
df <- read.csv('hotel_bookings.csv')
df <- df[complete.cases(df),]

# 문자형 -> 범주형 변경
df<-df%>%
  mutate(
    hotel=as.factor(hotel),      
    is_canceled=as.factor(is_canceled),
    meal=as.factor(meal),
    country=as.factor(country),
    market_segment=as.factor(market_segment),
    distribution_channel=as.factor(distribution_channel),
    is_repeated_guest=as.factor(is_repeated_guest),
    reserved_room_type=as.factor(reserved_room_type),
    assigned_room_type=as.factor(assigned_room_type),
    deposit_type=as.factor(deposit_type),
    customer_type=as.factor(customer_type),
    reservation_status=as.factor(reservation_status),
    agent=as.factor(agent),
    company=as.factor(company),
    arrival_date_day_of_month=as.factor(arrival_date_day_of_month),
    arrival_date_month=as.factor(arrival_date_month),
    arrival_date_year=as.factor(arrival_date_year)
    
  )

# country group

df%>%
  group_by(country)%>%
  summarise(num=n())%>%
  arrange(desc(num))

df%>%
  filter(adr>1000)

df = df%>%
  mutate(adr = replace(adr, adr>1000, mean(adr)))

df <- df[df$adr> 0, ]


# Define UI for application that draws a histogram
ui <- fluidPage(
  tabsetPanel(
    tabPanel('1st', 
             sidebarLayout(
               sidebarPanel(),
               
               # Show a plot of the generated distribution
               mainPanel(
                 tabsetPanel(
                   tabPanel('treemaps', h2('재방문고객의 국적별로 차지하는 비율 -> treemaps 사용'),
                            d3tree2Output("wng_tree")
                            ),
                   
                   tabPanel('bargraph', h2('첫방문, 재방문 별로 분류해서 범주형 데이터 분석 -> geom_bar 사용'),
                            selectInput("wng_count", 
                                        label = "첫방문,재방문 비교",
                                        choices = c("meal", 
                                                    "customer_type",
                                                    "reservation_status", 
                                                    "reserved_room_type"),
                                        selected = "meal")
                            , 
                            # 첫방문, 재방문 별로 비교
                            plotOutput("wng_bar")
                            ),
                   tabPanel('map', h2('준비중')),
                   tabPanel('violin', h2('준비중')),
                   tabPanel('rank', h2('준비중'))
                 )
                 ,
                 
                 
                 
               )
             )
             ),
    tabPanel('fff')
  ),

    # Application title
    titlePanel("재방문 관련 변수 분석"),

    # Sidebar with a slider input for number of bins 
    
)
?mutate
# Define server logic required to draw a histogram
server <- function(input, output) {

    output$wng_tree <- renderD3tree2({
      df_agg <- read.csv('hotel_rep_agg.csv')
      # basic treemap
      p <- treemap(df_agg,
                   index=c("is_prt","continent", "country" ),
                   vSize="value",
                   type="index",
                   palette = "Set2",
                   align.labels=list(
                     c("center", "center"), 
                     c("right", "bottom")
                   )  
      )              
      # bg.labels=c("white")
      # make it interactive ("rootname" becomes the title of the plot):
      inter <- d3tree2( p ,  rootname = "General" )
      inter
    })
    
    output$wng_bar <- renderPlot({
      
      # formulaText <- reactive({
      #   paste('x=', input$wng_count, 'fill=', input$wng_count )
      # })
      p <- ggplot(data=df, mapping = aes(x=get(input$wng_count), fill=get(input$wng_count)))
      q <- p + geom_bar() +facet_wrap(~is_repeated_guest, nrow=2, scales = 'free', labeller ='label_both')
      q
    })

}

# Run the application 
shinyApp(ui = ui, server = server)
